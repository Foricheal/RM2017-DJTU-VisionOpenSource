#define CV_DEBUG 1

#include <iostream>
#include <sstream>
#include <ros/ros.h>
#include <image_transport/image_transport.h>
#include <cv_bridge/cv_bridge.h>
#include "std_msgs/String.h"
 
#include "Header.h"
#include "FindTarget.h"
#include "RMLandFinder.h"
#include "mission_lists.h"


#if CV_DEBUG
VideoWriter writer_land("/home/ubuntu/Desktop/video/RMLand.avi",CV_FOURCC('M','J','P','G'),25,Size(400,300));
VideoWriter writer_hero("/home/ubuntu/Desktop/video/RMHero.avi",CV_FOURCC('M','J','P','G'),25,Size(400,300));
#endif

int choice = 0;
Mat img,brighted,resized,Thres;
Point HeroCenter,LandCenter;
RMLandFinder LandSolver;
RMHeroDetect Herodetector(60,60);
void imageCallback(const sensor_msgs::ImageConstPtr& msg){
	img = cv_bridge::toCvShare(msg, "bgr8")->image;
	if(choice == 1){
		resize(img,resized,Size(400,300));
		imshow("Init",resized);
		Herodetector.Process(resized);
        	Herodetector.dataout(Thres,resized,HeroCenter);
		circle(resized,HeroCenter,10,Scalar(0,0,0),-1);
		imshow("Thres",Thres);
		imshow("Result",resized);
#if CV_DEBUG
		writer_hero<<resized;
#endif
	}else if(choice == 2){  // blue
		resize(img,resized,Size(400,300));
		imshow("Init",resized);
		LandSolver.Process(resized, BLUE);
        	LandSolver.dataout(resized, Thres,LandCenter);
		circle(resized, LandCenter, 10, Scalar(0,0,0),-1);
		imshow("Thres",Thres);
		imshow("Result",resized);
#if CV_DEBUG
		writer_land<<resized;
#endif
	}else if(choice == 3){  // red
		resize(img,resized,Size(400,300));
		imshow("Init",resized);
		LandSolver.Process(resized, RED);
        	LandSolver.dataout(resized, Thres,LandCenter);
		circle(resized, LandCenter, 10, Scalar(0,0,0),-1);
		imshow("Thres",Thres);
		imshow("Result",resized);
#if CV_DEBUG
		writer_land<<resized;
#endif
	}else{
		LandSolver.VariableReset();
		Herodetector.VariableReset();
	}

}

void deal_camera(const mode_selecter::Remote_mode::ConstPtr &msg){
	choice = msg->mode; 
}

int main(int argc, char *argv[]){
	ros::init(argc,argv,"vision_missions");
    ros::NodeHandle nh;
    ros::spinOnce();
	
	image_transport::ImageTransport it(nh);
    image_transport::Subscriber sub_cam = it.subscribe("camera/image", 1, imageCallback);
	ros::Subscriber sub_camera_choice = nh.subscribe("Remote_mode",1,deal_camera);

	ros::Publisher pub_hero = nh.advertise<vision_missions::rm_hero>("RM_HeroCenter",1);
	ros::Publisher pub_land = nh.advertise<vision_missions::rm_land>("RM_LandCenter",1);
    namedWindow("Init");
	namedWindow("Thres");
	namedWindow("Result");
	startWindowThread();
	
	while(ros::ok()){
		ros::spinOnce();
		if(choice == 1){
			vision_missions::rm_hero hero_center;
			hero_center.x = HeroCenter.x;
			hero_center.y = HeroCenter.y;
			pub_hero.publish(hero_center);
		}else if(choice == 2 || choice == 3){
			vision_missions::rm_land land_center;
			land_center.x = LandCenter.x;
			land_center.y = LandCenter.y;
			pub_land.publish(land_center);
		}
	}
	return 0;
}
